{"ast":null,"code":"var _jsxFileName = \"D:\\\\ba-link-home-task\\\\frontend\\\\usermanager\\\\src\\\\components\\\\users\\\\Select.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react'; //need to solve styling \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Select = props => {\n  _s();\n\n  const selectHandler = e => {\n    console.log(e.target.value);\n    console.log(props.name);\n    props.HandleInputEvent(e, props.name);\n  }; //let is limited only to his scope let wont work in this case.\n\n\n  var arr = [];\n  const [options, setOptions] = useState(new Array(121));\n  useEffect(() => {\n    arr = Array.apply(null, {\n      length: 121\n    }).map((elem, idx) => {\n      return idx + 1;\n    });\n    console.log(arr);\n    setOptions(arr);\n    console.log(\"options is \", options);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: props.val,\n    onChange: selectHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n      defaultValue: \"Age\",\n      children: \"Age\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), options.map(i => {\n      return /*#__PURE__*/_jsxDEV(\"option\", {\n        value: i,\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 28\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Select, \"HQjvWICy+UeTtpyETaAopFj1Qfs=\");\n\n_c = Select;\nexport default Select;\n\nvar _c;\n\n$RefreshReg$(_c, \"Select\");","map":{"version":3,"sources":["D:/ba-link-home-task/frontend/usermanager/src/components/users/Select.js"],"names":["React","useEffect","useState","Select","props","selectHandler","e","console","log","target","value","name","HandleInputEvent","arr","options","setOptions","Array","apply","length","map","elem","idx","val","i"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAOA;;;;AACA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AAGtB,QAAMC,aAAa,GAAIC,CAAD,IAAO;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,KAArB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACO,IAAlB;AACAP,IAAAA,KAAK,CAACQ,gBAAN,CAAuBN,CAAvB,EAA0BF,KAAK,CAACO,IAAhC;AACH,GAJD,CAHsB,CAUtB;;;AACA,MAAIE,GAAG,GAAG,EAAV;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAIc,KAAJ,CAAU,GAAV,CAAD,CAAtC;AAEAf,EAAAA,SAAS,CAAC,MAAM;AAIZY,IAAAA,GAAG,GAAGG,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAlB,EAAmCC,GAAnC,CAAuC,CAACC,IAAD,EAAOC,GAAP,KAAe;AACxD,aAAOA,GAAG,GAAG,CAAb;AACH,KAFK,CAAN;AAIAd,IAAAA,OAAO,CAACC,GAAR,CAAYK,GAAZ;AAIAE,IAAAA,UAAU,CAACF,GAAD,CAAV;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BM,OAA3B;AACH,GAdQ,EAcN,EAdM,CAAT;AAkBA,sBAEI;AACI,IAAA,KAAK,EAAEV,KAAK,CAACkB,GADjB;AAEI,IAAA,QAAQ,EAAEjB,aAFd;AAAA,4BAII;AAAQ,MAAA,YAAY,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,EAMQS,OAAO,CAACK,GAAR,CAAaI,CAAD,IAAO;AAEf,0BAAO;AAAgB,QAAA,KAAK,EAAEA,CAAvB;AAAA,kBAA2BA;AAA3B,SAAaA,CAAb;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAHD,CANR;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAgBH,CAhDD;;GAAMpB,M;;KAAAA,M;AAkDN,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\n\r\n\r\n\r\n\r\n\r\n//need to solve styling \r\nconst Select = (props) => {\r\n\r\n\r\n    const selectHandler = (e) => {\r\n        console.log(e.target.value)\r\n        console.log(props.name)\r\n        props.HandleInputEvent(e, props.name);\r\n    }\r\n\r\n\r\n    //let is limited only to his scope let wont work in this case.\r\n    var arr = [];\r\n    const [options, setOptions] = useState(new Array(121));\r\n\r\n    useEffect(() => {\r\n\r\n\r\n\r\n        arr = Array.apply(null, { length: 121 }).map((elem, idx) => {\r\n            return idx + 1;\r\n        });\r\n\r\n        console.log(arr)\r\n\r\n\r\n\r\n        setOptions(arr)\r\n        console.log(\"options is \", options)\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n\r\n        <select\r\n            value={props.val}\r\n            onChange={selectHandler}\r\n        >\r\n            <option defaultValue=\"Age\">Age</option>\r\n            {\r\n                options.map((i) => {\r\n\r\n                    return <option key={i} value={i}>{i}</option>\r\n                })\r\n            }\r\n\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default Select\r\n"]},"metadata":{},"sourceType":"module"}